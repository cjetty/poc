apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: du-pod
  name: du-deployment
  namespace: du-poc
spec:
  replicas: 1
  selector:
    matchLabels:
      app: du-pod
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: du-pod
    spec:
      volumes:
      - name: shared-data
        emptyDir: {}
      containers:
      - env:
        - name: MY_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        image: LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY/IMAGE:TAG
        imagePullPolicy: IfNotPresent
        name: du-container
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - name: shared-data
          mountPath: /pod_volume

      - name: du-tcpdump-container
        image: LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY/IMAGE:TAG
        imagePullPolicy: IfNotPresent
        command: ["tcpdump" ]
        args: ["-Qin", "-i", "eth0", "-w", "/app/du_captured.pcap"]
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - name: shared-data
          mountPath: /app
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - if [[ $(stat -c %s "/app/du_captured.pcap") -gt 0 ]]; then  exit 1 ; fi
          initialDelaySeconds: 10
          periodSeconds: 5
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30