# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "main" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build and Deploy to GKE

on:
  push:
    #paths:
    #  - "kubernetes_cluster/*"
    branches:
      - "main"

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GAR_LOCATION: europe-west2 # TODO: update region of the Artifact Registry
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}    # TODO: update to cluster name
  GKE_ZONE: ${{ secrets.GKE_ZONE }}   # TODO: update to cluster zone
  DU_DEPLOYMENT_NAME: ${{ secrets.DU_DEPLOYMENT }} # TODO: update to deployment name
  RU_DEPLOYMENT_NAME: ${{ secrets.RU_DEPLOYMENT }} # TODO: update to deployment name
  REPOSITORY: ${{ secrets.GAR_REPO }} # TODO: update to Artifact Registry docker repository
  IMAGE: ${{ secrets.IMAGE }}

jobs:
  bring-up-infrastructure-using-terraform:
    name: Setting up infrastructure
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    - name: setup gcloud CLI
      uses: google-github-actions/auth@v0
      with:
        project_id: ${{ secrets.GKE_PROJECT }}
        # this is the json key of the service account created on the project
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}  
        export_default_credentials: true

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: ./infrastructure
      run: terraform init

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      working-directory: ./infrastructure
      run: terraform plan

      # On push to master, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      working-directory: ./infrastructure
      run: terraform apply --auto-approve


  setup-build-publish-deploy:
    needs: bring-up-infrastructure-using-terraform
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Configure Workload Identity Federation and generate an access token.
    #- id: 'auth'
    #  name: 'Authenticate to Google Cloud'
    #  uses: 'google-github-actions/auth@v0'
    #  with:
    #    token_format: 'access_token'
    #    workload_identity_provider: 'projects/du-poc/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
    #    service_account: 'du-terraform@du-poc.iam.gserviceaccount.com'

    # Alternative option - authentication via credentials json
    - id: 'auth'
      uses: 'google-github-actions/auth@v0'
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
        export_default_credentials: true

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v0
      with:
        install_components: alpha

    - name: Docker configuration
      run: |-
        /usr/bin/pip3 uninstall crcmod
        /usr/bin/pip3 install --no-cache-dir -U crcmod
        /usr/bin/python3 -m pip install google-crc32c==1.3.0 --target /usr/lib/google-cloud-sdk/lib/third_party
        gcloud --quiet auth configure-docker $GAR_LOCATION-docker.pkg.dev
        gsutil version -l

    # Get the GKE credentials so we can deploy to the cluster
    - name: Set up GKE credentials
      uses: google-github-actions/get-gke-credentials@v0
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}

    #Pull existing image from GAR as base image
    #- name: Pull Existing image
    #  working-directory: ./kubernetes_cluster
    #  run: |
    #    docker pull europe-west2-docker.pkg.dev/du-poc/du-images/du_poc_image:latest

    - name: Pull Pcap file from GCP bucket
      working-directory:  ./kubernetes_cluster
      run: |
        gcloud alpha storage cp gs://du_poc/port0_2022_7_1_8_29_51_0.pcap ./
        ls -alh .

    # Build the Docker image
    - name: Build
      working-directory: ./kubernetes_cluster
      run: |
        docker build . -t $IMAGE
        docker tag $IMAGE "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"

    # Push the Docker image to Google Artifact Registry
    - name: Publish
      if: always()
      working-directory: ./kubernetes_cluster
      run: |-
        docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"

    # Set up kustomize
    - name: Set up Kustomize
      working-directory: ./kubernetes_cluster
      run: |-
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize

    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      working-directory: ./kubernetes_cluster
      run: |-
        # replacing the image name in the k8s template
        ./kustomize edit set image LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY/IMAGE:TAG=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA
        ./kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/$DU_DEPLOYMENT_NAME -n du-poc
        kubectl rollout status deployment/$RU_DEPLOYMENT_NAME -n du-poc
        kubectl get services -n du-poc -o wide
